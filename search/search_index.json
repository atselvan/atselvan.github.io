{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to the documentation of Private Square", 
            "title": "Welcome"
        }, 
        {
            "location": "/#welcome-to-the-documentation-of-private-square", 
            "text": "", 
            "title": "Welcome to the documentation of Private Square"
        }, 
        {
            "location": "/blog/cicd-fundamentals/", 
            "text": "CI/CD Fundamentals\n\n\nWhat is Continuous Intergration CI?\n\n\nContinuous integration is a software development practice where members of a team integrate their work frequently\n\n\n\n\nAutomate build and test executions of components\n\n\nBuild very often (eg. per commit) to detectregressions quickly\n\n\nTest often (unit and integration tests)\n\n\nAutomate regular code quality analysis exections\n\n\n\n\n\n\nWhat is Continuous Delivery?\n\n\n\n\nWhile CI lets you auomate the software build, scan and test process, CD automates the full application delivery pipeline taking new features and code from development to staging to production.\n\n\nCD is the ability to get new features, configuration changes, bug fixes into production or into the hands of the users safely and quickly in a sustainable way\n\n\n\n\n\n\nContinuous delivery vs continuous deployment\n\n\nContinuous delivery is a series of practices designed to ensure that code can be rapidly and safely deployed to production by delivering every change to a production-like environment and ensuring business applications and services function as expected through rigorous automated testing. Since every change is delivered to a staging environment using complete automation, you can have confidence the application can be deployed to production with a push of a button when the business is ready.\n\n\nContinuous deployment is the next step of continuous delivery: Every change that passes the automated tests is deployed to production automatically. Continuous deployment should be the goal of most companies that are not constrained by regulatory or other requirements.\n\n\n\n\nWhile continuous deployment may not be right for every company, continuous delivery is an absolute requirement of DevOps practices. Only when you continuously deliver your code can you have true confidence that your changes will be serving value to your customers within minutes of pushing the \"go\" button, and that you can actually push that button any time the business is ready for it.\n\n\nCICD, Why do it?\n\n\n\n\nMake releases painless\n\n\nReduce time to market\n\n\nIncrease software quality and stability\n\n\nReduce cost of ongoing software development\n\n\nSpeed up the feedback loop\n\n\n\n\nHow long would it take to your organization to deploy a changes that involves just one line of code?\n\n\nReferences\n\n\n\n\nCloudbees trainings\n\n\nContinuous delivery Vs continuous deployment by puppet", 
            "title": "CICD fundamentals"
        }, 
        {
            "location": "/blog/cicd-fundamentals/#cicd-fundamentals", 
            "text": "", 
            "title": "CI/CD Fundamentals"
        }, 
        {
            "location": "/blog/cicd-fundamentals/#what-is-continuous-intergration-ci", 
            "text": "Continuous integration is a software development practice where members of a team integrate their work frequently   Automate build and test executions of components  Build very often (eg. per commit) to detectregressions quickly  Test often (unit and integration tests)  Automate regular code quality analysis exections", 
            "title": "What is Continuous Intergration CI?"
        }, 
        {
            "location": "/blog/cicd-fundamentals/#what-is-continuous-delivery", 
            "text": "While CI lets you auomate the software build, scan and test process, CD automates the full application delivery pipeline taking new features and code from development to staging to production.  CD is the ability to get new features, configuration changes, bug fixes into production or into the hands of the users safely and quickly in a sustainable way", 
            "title": "What is Continuous Delivery?"
        }, 
        {
            "location": "/blog/cicd-fundamentals/#continuous-delivery-vs-continuous-deployment", 
            "text": "Continuous delivery is a series of practices designed to ensure that code can be rapidly and safely deployed to production by delivering every change to a production-like environment and ensuring business applications and services function as expected through rigorous automated testing. Since every change is delivered to a staging environment using complete automation, you can have confidence the application can be deployed to production with a push of a button when the business is ready.  Continuous deployment is the next step of continuous delivery: Every change that passes the automated tests is deployed to production automatically. Continuous deployment should be the goal of most companies that are not constrained by regulatory or other requirements.   While continuous deployment may not be right for every company, continuous delivery is an absolute requirement of DevOps practices. Only when you continuously deliver your code can you have true confidence that your changes will be serving value to your customers within minutes of pushing the \"go\" button, and that you can actually push that button any time the business is ready for it.", 
            "title": "Continuous delivery vs continuous deployment"
        }, 
        {
            "location": "/blog/cicd-fundamentals/#cicd-why-do-it", 
            "text": "Make releases painless  Reduce time to market  Increase software quality and stability  Reduce cost of ongoing software development  Speed up the feedback loop   How long would it take to your organization to deploy a changes that involves just one line of code?", 
            "title": "CICD, Why do it?"
        }, 
        {
            "location": "/blog/cicd-fundamentals/#references", 
            "text": "Cloudbees trainings  Continuous delivery Vs continuous deployment by puppet", 
            "title": "References"
        }, 
        {
            "location": "/blog/networking-fundamentals/", 
            "text": "Networking Fundamentals\n\n\nWhat is the internet?\n\n\nThe internet is a huge network of computing devices communicating with each other based on a pre-agreed set of rules called protocols.\n\n\n\n\nThe internet is a global computer network providing a variety of information and communication facilities, consisting of interconnected networks using standardized communication protocols. (google definition)\n\n\n\n\n\n\nHow is this network formed and how does it work?\n\n\nThe edge devices that are part of this network are called hosts or end systems. For enample: Laptops, mobiles are the end systems. The end systems are connected by a network of communication links and packet switches. The communication links are made up of physical connections made of copper wires, fiber optics, radio spectrum etc. One end system sends data to another by segmenting the data into small segments with header bytes on them. These packages of information are called packets and are sent through the network to the destination end system where they are reassembled into the original data. A packet switch is responsible for routing the packets to its destination. The packet switch takes a packet arriving on one of its incoming communication links and forwards that packet on one of its outgoing communication links. Our router is a packet switch. The sequence of communication links and packet switches traversed by a packet in known as the route through the network.\n\n\n\n\nThere is beautiful analogy presented in the book Computer Networking by Kurose and Ross. It says, if a factory needs to move a large amount of cargo to some destination warehouse located thousands of kilometers away, then, the cargo is first segmented and loaded into a fleet of trucks. Each of the trucks then independently travels through the network of highways, roads, and intersections to the destination warehouse. At the destination warehouse, the cargo is unloaded and grouped with the rest of the cargo arriving from the same shipment. Thus, in many ways, packets are analogous to trucks, communication links analogous to highways and roads. Packet switches are analogous to intersections, and end systems are analogous to destination buildings.\n\n\n\n\nWhat are ISPs, TCP/IP and RFCs?\n\n\nISPs\n\n\nEnd systems access the internet through \nInternet Service Provider(ISPs)\n. ISPs include local cable or telephone companies. Each ISPs is in itself a network of packet switches and communication links. These ISPs are also interconnected. Lower-tier ISPs are interconnected through national and international upper-tier ISPs such as AT\nT and Sprint.\n\n\nTCP/IP\n\n\nAll the component of this network run protocols that control the sending and receiving of information. A protocol defines the format and the order of the messages exchanged between two or more communicating entities, as well as the actions taken on the transmission and/or receipt of a message or other events. The \nTransmission Control Protocol(TCP)\n and the \nInternet Protocol(IP)\n are the two of the most important protocols that are sent and received among the routers and end systems. The internet\u2019s principle protocols are collectively known as TCP/IP.\n\n\nIEFT and RFCs\n\n\nThese protocols are most important for the unanimous functioning and thus important that everyone agrees on what each and every protocol does. These Internet standards are developed by the \nInternet Engineering Task Force(IETF)\n. The IETF standard documents are called \nrequest for comments(RFCs)\n.\n\n\nHow does one application running on one end system instructs the Internet to deliver data to another software running on another end system?\n\n\nEnd systems attached to the Internet, provide an Application Programming Interface(API) that specifies the rules for this process. \n\n\n\n\nTaking an analogy from the same book: Suppose Alice wants to send a letter to Bob using the postal service. Alice, of course, can\u2019t just write the letter(the data) and drop the letter out her window. Instead, the postal service requires that Alice put the letter in an envelope; write Bob\u2019s full name, address, and zip code in the center of the envelope; seal the envelope; put a stamp in the upper-right-hand corner of the envelope; and finally, drop the envelope into an official postal service mailbox. Thus, the postal service has its own \u201cpostal service API\u201d, or set of rules, that Alice must follow to have the postal service deliver her letter to Bob.\n\n\n\n\nIn a similar manner, the internet has an API that the software sending data must follow to have the internet deliver the data to the software that will receive the data.\n\n\nWhat are client and server program and P2P architecture?\n\n\nA client program is a program running on one end system that requests and receives a service from a server program running on another end system. The web browser is an example of a client program and Nginx or NodeJS or Tomcat is an example of a server program.\n\n\nNot all Internet application today consists of pure client programs interacting with pure server programs. Increasingly, many application is peer-to-peer(P2P) applications, in which end systems interact and run programs that perform both client and server functions. For example, in P2P file-sharing applications(such as BitTorrent or eMule), the program in the user\u2019s end system act as a client when it requests a file from another peer; and the program acts as a server when it sends a file to another peer.\n\n\nWhat are LAN and WAN?\n\n\nLAN\n\n\nLocal Area Network (LAN)\n is a computer network, which is limited to a small office, a single building, multiple buildings inside a campus etc. Typically a LAN is a private network owned and maintained by a single organization.\n\n\nWAN\n\n\nA \nWide Area Network (WAN)\n spans over multiple geographic locations, which is composed of multiple LANs. ISPs provide the connectivity solutions for WAN.\n\n\nWhat is an IP address?\n\n\nFor one device to communicate with another, it needs an IP address, and it must be unique. If there is another device on the same network with the same IP there will be an IP address conflict and both devices will lose network capability until this is resolved.\n\n\nThe IP address consists of 4 numbers separated by decimals. The IP address itself is separated into a network address and a host address. This means that one part of the IP address identifies the computer network ID and the other part identifies the host ID.\nAs an example, an IP address of 192.168.0.11 with subnet mask 255.255.255.0 uses the first 3 numbers to identify the network and the last number to identify the host. So, the network id would be 192.168.0 and the host id would be 11. Devices can only communicate with other devices on the same network id. In other words, communication will work between 2 devices with IPs 192.168.0.221 and 192.168.0.11 respectively but neither can communicate with 192.168.1.31 because it is part of the 192.168.1 network.\n\n\nSubnet Mask\n : As a general rule wherever there is a 255 in the subnet mask then the corresponding number of the IP address is part of the network id; where there is 0 in the subnet mask the corresponding number in the IP address is part of the host id. For an IP address of 192.168.0.1 with a subnet mask of 255.0.0.0. This tells the device that the first number of the IP address is to be used as the network address and the last 3 are to be used as the host id. In this example, the computer network would be 192.x.x.x. As long as another computer has the same subnet mask and an IP address starting with 192 they can communicate with each other. If the subnet mask was 255.255.0.0 then this means that the first 2 numbers identify the network instead (192.168.x.x). Therefore to be on the same network both devices must have IP addresses starting with 192.168.\n\n\nHow do devices on different networks communicate?\n\n\nCommunication across different network IDs take place with the help of a router. A router is a network device with 2 \nnetwork interfaces (NICs)\n, each being on separate network ids. So, we may have 2 networks; 192.168.1.x and 192.168.2.x. On one NIC the router would have the IP address 192.168.1.1 and on the other, it would have an IP address of 192.168.2.1. Devices on the 192.168.1.x network can now communicate with devices on the 192.168.2.x network via the router.\n\n\nHow does the data travel from source end system to destination end system?\n\n\nThe default gateway is where a network device sends traffic to if it doesn\u2019t know the destination IP address. The default gateway is always a router.\nWhen a network device tries to communicate with another on the same network it sends the data directly to it. If it is on a separate network it forwards the data to whatever IP address is specified in the default gateway. This is because it doesn\u2019t know of this other network and it needs to send the data to a gateway out of its own network. This is why we always put the IP address of the router in the default gateway field. Because a router will be attached to multiple networks, so it knows where these other networks are and it can route traffic to them. Routers also have default gateways so that if they don\u2019t know where the destination is then they can also send the data to its own default gateway. This continues up the IP network hierarchy until it eventually finds a router that is part of the destination network. This last router knows where the destination is and sends it on its way.\n\n\nWhat is DHCP?\n\n\nNetwork devices need to be configured with an IP address, subnet mask and default gateway that will be unique to that network. Generally, we don\u2019t manually configure them but are configured automatically using DHCP servers. DHCP stands for \nDynamic Host Configuration Protocol\n. Servers and some routers can be configured to act as a DHCP server. It allots the IP addresses to the connecting devices so to prevent IP address conflicts.\n\n\nHow does a router function?\n\n\nA router should have at least two \nnetwork cards (NICs)\n, one physically connected to one network and the other physically connected to another network. A router can connect any number of networks together providing it has a dedicated NIC for each network.\n\n\nRouters also learn which are the fastest routes and use them first. Each route the router knows of has a metric value assigned to it. A metric value is basically a preference number. If there are two routes to the same destination then the one with the lowest metric is assumed to be the most efficient. Routers will always use this route first until it fails, in which case it will then try the route with the next lowest metric and so on.\n\n\nAll network devices that use the TCP/IP protocol have a routing table. On Linux based system run netstat -rn command to view this table. All devices use their routing table to determine where to send packets. When a device sends packets to another device, it looks at its routing table to determine the best route possible. If it finds the destination address is \u201con-link\u201d it knows that it is a part of the same subnet as the destination and sends the packets directly to the device. If not it forwards the packet onto whatever is in the gateway field of the matching route entry. This same process is repeated at every router/hop along the way until it eventually arrives at a router that is part of the destination network.\n\n\nWhat is a port?\n\n\nIn the internet protocol suite, a port is an endpoint of communication in an operating system, in software, it is a logical construct that identifies a specific process or a type of network service.\n\n\nA port is always associated with an IP address of a host and the protocol of the communication. A port is identified for each address and protocol by a 16-bit number, commonly known as the port number. For example, an address may be \u201cprotocol: TCP, IP address: 1.2.3.4, port number: 80\u201d, which is written as 1.2.3.4:80 when the protocol is known from context.\n\n\nThe port, which is the number after \u201c:\u201d in the IP address defines the port on which the data has to be sent.By default, HTTP uses port 80 and HTTPS uses port 443, and we don\u2019t add them in the browser but are implicitly handled by the browsers. But a URL like \nhttp://www.example.com:8080/path/\n specifies that the web browser connects instead to port 8080 of the HTTP server.\n\n\nWhat is port forwarding?\n\n\nPort forwarding or port mapping is an application of \nnetwork address translation (NAT)\n that redirects a communication request from one address and port number combination to another while the packets are traversing a network gateway, such as a router or firewall. This technique is most commonly used to make services on a host residing on a protected or masqueraded (internal) network available to hosts on the opposite side of the gateway (external network), by remapping the destination IP address and port number of the communication to an internal host.\n\n\nWhat this mean is that when a request arrives at a router at a specific port then it reroutes this request to a server in the local network of the router so to be able to process it (if configured on NAT settings). So, it in a way works as a gatekeeper.\n\n\nWhat is DNS?\n\n\nDomain names are the human-friendly forms of Internet addresses and are commonly used to find websites. The domain name system(DNS) is essentially a global addressing system. It is the way that domain names are located and translated into Internet Protocol (IP) addresses, and vice versa. A domain name such as example.com is a unique alias for an IP address 123.123.123.123, which is an actual physical point on the Internet. The \nInternet Corporation for Assigned Names and Numbers (ICANN)\n is a non-profit organization responsible for coordinating the maintenance and procedures of several databases related to the namespaces of the Internet. We can buy a domain name from a vendor like GoDaddy and others for a period and then tell that domain to point to an actual server address using the websites of those vendors.\n\n\nWhat is a public IP address?\n\n\nA public IP address is an IP address that our home or business router receives from your ISP. Public IP addresses are required for any publicly accessible network devices, like for our home router as well as for the servers that host websites.\n\n\nPublic IP addresses are what differentiate all devices that are plugged into the public internet. Each and every device that\u2019s accessing the internet is using a unique IP address. It\u2019s this address that each Internet Service Provider uses to forward internet requests to a specific home or business.", 
            "title": "Networking fundamentals"
        }, 
        {
            "location": "/blog/networking-fundamentals/#networking-fundamentals", 
            "text": "", 
            "title": "Networking Fundamentals"
        }, 
        {
            "location": "/blog/networking-fundamentals/#what-is-the-internet", 
            "text": "The internet is a huge network of computing devices communicating with each other based on a pre-agreed set of rules called protocols.   The internet is a global computer network providing a variety of information and communication facilities, consisting of interconnected networks using standardized communication protocols. (google definition)", 
            "title": "What is the internet?"
        }, 
        {
            "location": "/blog/networking-fundamentals/#how-is-this-network-formed-and-how-does-it-work", 
            "text": "The edge devices that are part of this network are called hosts or end systems. For enample: Laptops, mobiles are the end systems. The end systems are connected by a network of communication links and packet switches. The communication links are made up of physical connections made of copper wires, fiber optics, radio spectrum etc. One end system sends data to another by segmenting the data into small segments with header bytes on them. These packages of information are called packets and are sent through the network to the destination end system where they are reassembled into the original data. A packet switch is responsible for routing the packets to its destination. The packet switch takes a packet arriving on one of its incoming communication links and forwards that packet on one of its outgoing communication links. Our router is a packet switch. The sequence of communication links and packet switches traversed by a packet in known as the route through the network.   There is beautiful analogy presented in the book Computer Networking by Kurose and Ross. It says, if a factory needs to move a large amount of cargo to some destination warehouse located thousands of kilometers away, then, the cargo is first segmented and loaded into a fleet of trucks. Each of the trucks then independently travels through the network of highways, roads, and intersections to the destination warehouse. At the destination warehouse, the cargo is unloaded and grouped with the rest of the cargo arriving from the same shipment. Thus, in many ways, packets are analogous to trucks, communication links analogous to highways and roads. Packet switches are analogous to intersections, and end systems are analogous to destination buildings.", 
            "title": "How is this network formed and how does it work?"
        }, 
        {
            "location": "/blog/networking-fundamentals/#what-are-isps-tcpip-and-rfcs", 
            "text": "", 
            "title": "What are ISPs, TCP/IP and RFCs?"
        }, 
        {
            "location": "/blog/networking-fundamentals/#isps", 
            "text": "End systems access the internet through  Internet Service Provider(ISPs) . ISPs include local cable or telephone companies. Each ISPs is in itself a network of packet switches and communication links. These ISPs are also interconnected. Lower-tier ISPs are interconnected through national and international upper-tier ISPs such as AT T and Sprint.", 
            "title": "ISPs"
        }, 
        {
            "location": "/blog/networking-fundamentals/#tcpip", 
            "text": "All the component of this network run protocols that control the sending and receiving of information. A protocol defines the format and the order of the messages exchanged between two or more communicating entities, as well as the actions taken on the transmission and/or receipt of a message or other events. The  Transmission Control Protocol(TCP)  and the  Internet Protocol(IP)  are the two of the most important protocols that are sent and received among the routers and end systems. The internet\u2019s principle protocols are collectively known as TCP/IP.", 
            "title": "TCP/IP"
        }, 
        {
            "location": "/blog/networking-fundamentals/#ieft-and-rfcs", 
            "text": "These protocols are most important for the unanimous functioning and thus important that everyone agrees on what each and every protocol does. These Internet standards are developed by the  Internet Engineering Task Force(IETF) . The IETF standard documents are called  request for comments(RFCs) .", 
            "title": "IEFT and RFCs"
        }, 
        {
            "location": "/blog/networking-fundamentals/#how-does-one-application-running-on-one-end-system-instructs-the-internet-to-deliver-data-to-another-software-running-on-another-end-system", 
            "text": "End systems attached to the Internet, provide an Application Programming Interface(API) that specifies the rules for this process.    Taking an analogy from the same book: Suppose Alice wants to send a letter to Bob using the postal service. Alice, of course, can\u2019t just write the letter(the data) and drop the letter out her window. Instead, the postal service requires that Alice put the letter in an envelope; write Bob\u2019s full name, address, and zip code in the center of the envelope; seal the envelope; put a stamp in the upper-right-hand corner of the envelope; and finally, drop the envelope into an official postal service mailbox. Thus, the postal service has its own \u201cpostal service API\u201d, or set of rules, that Alice must follow to have the postal service deliver her letter to Bob.   In a similar manner, the internet has an API that the software sending data must follow to have the internet deliver the data to the software that will receive the data.", 
            "title": "How does one application running on one end system instructs the Internet to deliver data to another software running on another end system?"
        }, 
        {
            "location": "/blog/networking-fundamentals/#what-are-client-and-server-program-and-p2p-architecture", 
            "text": "A client program is a program running on one end system that requests and receives a service from a server program running on another end system. The web browser is an example of a client program and Nginx or NodeJS or Tomcat is an example of a server program.  Not all Internet application today consists of pure client programs interacting with pure server programs. Increasingly, many application is peer-to-peer(P2P) applications, in which end systems interact and run programs that perform both client and server functions. For example, in P2P file-sharing applications(such as BitTorrent or eMule), the program in the user\u2019s end system act as a client when it requests a file from another peer; and the program acts as a server when it sends a file to another peer.", 
            "title": "What are client and server program and P2P architecture?"
        }, 
        {
            "location": "/blog/networking-fundamentals/#what-are-lan-and-wan", 
            "text": "", 
            "title": "What are LAN and WAN?"
        }, 
        {
            "location": "/blog/networking-fundamentals/#lan", 
            "text": "Local Area Network (LAN)  is a computer network, which is limited to a small office, a single building, multiple buildings inside a campus etc. Typically a LAN is a private network owned and maintained by a single organization.", 
            "title": "LAN"
        }, 
        {
            "location": "/blog/networking-fundamentals/#wan", 
            "text": "A  Wide Area Network (WAN)  spans over multiple geographic locations, which is composed of multiple LANs. ISPs provide the connectivity solutions for WAN.", 
            "title": "WAN"
        }, 
        {
            "location": "/blog/networking-fundamentals/#what-is-an-ip-address", 
            "text": "For one device to communicate with another, it needs an IP address, and it must be unique. If there is another device on the same network with the same IP there will be an IP address conflict and both devices will lose network capability until this is resolved.  The IP address consists of 4 numbers separated by decimals. The IP address itself is separated into a network address and a host address. This means that one part of the IP address identifies the computer network ID and the other part identifies the host ID.\nAs an example, an IP address of 192.168.0.11 with subnet mask 255.255.255.0 uses the first 3 numbers to identify the network and the last number to identify the host. So, the network id would be 192.168.0 and the host id would be 11. Devices can only communicate with other devices on the same network id. In other words, communication will work between 2 devices with IPs 192.168.0.221 and 192.168.0.11 respectively but neither can communicate with 192.168.1.31 because it is part of the 192.168.1 network.  Subnet Mask  : As a general rule wherever there is a 255 in the subnet mask then the corresponding number of the IP address is part of the network id; where there is 0 in the subnet mask the corresponding number in the IP address is part of the host id. For an IP address of 192.168.0.1 with a subnet mask of 255.0.0.0. This tells the device that the first number of the IP address is to be used as the network address and the last 3 are to be used as the host id. In this example, the computer network would be 192.x.x.x. As long as another computer has the same subnet mask and an IP address starting with 192 they can communicate with each other. If the subnet mask was 255.255.0.0 then this means that the first 2 numbers identify the network instead (192.168.x.x). Therefore to be on the same network both devices must have IP addresses starting with 192.168.", 
            "title": "What is an IP address?"
        }, 
        {
            "location": "/blog/networking-fundamentals/#how-do-devices-on-different-networks-communicate", 
            "text": "Communication across different network IDs take place with the help of a router. A router is a network device with 2  network interfaces (NICs) , each being on separate network ids. So, we may have 2 networks; 192.168.1.x and 192.168.2.x. On one NIC the router would have the IP address 192.168.1.1 and on the other, it would have an IP address of 192.168.2.1. Devices on the 192.168.1.x network can now communicate with devices on the 192.168.2.x network via the router.", 
            "title": "How do devices on different networks communicate?"
        }, 
        {
            "location": "/blog/networking-fundamentals/#how-does-the-data-travel-from-source-end-system-to-destination-end-system", 
            "text": "The default gateway is where a network device sends traffic to if it doesn\u2019t know the destination IP address. The default gateway is always a router.\nWhen a network device tries to communicate with another on the same network it sends the data directly to it. If it is on a separate network it forwards the data to whatever IP address is specified in the default gateway. This is because it doesn\u2019t know of this other network and it needs to send the data to a gateway out of its own network. This is why we always put the IP address of the router in the default gateway field. Because a router will be attached to multiple networks, so it knows where these other networks are and it can route traffic to them. Routers also have default gateways so that if they don\u2019t know where the destination is then they can also send the data to its own default gateway. This continues up the IP network hierarchy until it eventually finds a router that is part of the destination network. This last router knows where the destination is and sends it on its way.", 
            "title": "How does the data travel from source end system to destination end system?"
        }, 
        {
            "location": "/blog/networking-fundamentals/#what-is-dhcp", 
            "text": "Network devices need to be configured with an IP address, subnet mask and default gateway that will be unique to that network. Generally, we don\u2019t manually configure them but are configured automatically using DHCP servers. DHCP stands for  Dynamic Host Configuration Protocol . Servers and some routers can be configured to act as a DHCP server. It allots the IP addresses to the connecting devices so to prevent IP address conflicts.", 
            "title": "What is DHCP?"
        }, 
        {
            "location": "/blog/networking-fundamentals/#how-does-a-router-function", 
            "text": "A router should have at least two  network cards (NICs) , one physically connected to one network and the other physically connected to another network. A router can connect any number of networks together providing it has a dedicated NIC for each network.  Routers also learn which are the fastest routes and use them first. Each route the router knows of has a metric value assigned to it. A metric value is basically a preference number. If there are two routes to the same destination then the one with the lowest metric is assumed to be the most efficient. Routers will always use this route first until it fails, in which case it will then try the route with the next lowest metric and so on.  All network devices that use the TCP/IP protocol have a routing table. On Linux based system run netstat -rn command to view this table. All devices use their routing table to determine where to send packets. When a device sends packets to another device, it looks at its routing table to determine the best route possible. If it finds the destination address is \u201con-link\u201d it knows that it is a part of the same subnet as the destination and sends the packets directly to the device. If not it forwards the packet onto whatever is in the gateway field of the matching route entry. This same process is repeated at every router/hop along the way until it eventually arrives at a router that is part of the destination network.", 
            "title": "How does a router function?"
        }, 
        {
            "location": "/blog/networking-fundamentals/#what-is-a-port", 
            "text": "In the internet protocol suite, a port is an endpoint of communication in an operating system, in software, it is a logical construct that identifies a specific process or a type of network service.  A port is always associated with an IP address of a host and the protocol of the communication. A port is identified for each address and protocol by a 16-bit number, commonly known as the port number. For example, an address may be \u201cprotocol: TCP, IP address: 1.2.3.4, port number: 80\u201d, which is written as 1.2.3.4:80 when the protocol is known from context.  The port, which is the number after \u201c:\u201d in the IP address defines the port on which the data has to be sent.By default, HTTP uses port 80 and HTTPS uses port 443, and we don\u2019t add them in the browser but are implicitly handled by the browsers. But a URL like  http://www.example.com:8080/path/  specifies that the web browser connects instead to port 8080 of the HTTP server.", 
            "title": "What is a port?"
        }, 
        {
            "location": "/blog/networking-fundamentals/#what-is-port-forwarding", 
            "text": "Port forwarding or port mapping is an application of  network address translation (NAT)  that redirects a communication request from one address and port number combination to another while the packets are traversing a network gateway, such as a router or firewall. This technique is most commonly used to make services on a host residing on a protected or masqueraded (internal) network available to hosts on the opposite side of the gateway (external network), by remapping the destination IP address and port number of the communication to an internal host.  What this mean is that when a request arrives at a router at a specific port then it reroutes this request to a server in the local network of the router so to be able to process it (if configured on NAT settings). So, it in a way works as a gatekeeper.", 
            "title": "What is port forwarding?"
        }, 
        {
            "location": "/blog/networking-fundamentals/#what-is-dns", 
            "text": "Domain names are the human-friendly forms of Internet addresses and are commonly used to find websites. The domain name system(DNS) is essentially a global addressing system. It is the way that domain names are located and translated into Internet Protocol (IP) addresses, and vice versa. A domain name such as example.com is a unique alias for an IP address 123.123.123.123, which is an actual physical point on the Internet. The  Internet Corporation for Assigned Names and Numbers (ICANN)  is a non-profit organization responsible for coordinating the maintenance and procedures of several databases related to the namespaces of the Internet. We can buy a domain name from a vendor like GoDaddy and others for a period and then tell that domain to point to an actual server address using the websites of those vendors.", 
            "title": "What is DNS?"
        }, 
        {
            "location": "/blog/networking-fundamentals/#what-is-a-public-ip-address", 
            "text": "A public IP address is an IP address that our home or business router receives from your ISP. Public IP addresses are required for any publicly accessible network devices, like for our home router as well as for the servers that host websites.  Public IP addresses are what differentiate all devices that are plugged into the public internet. Each and every device that\u2019s accessing the internet is using a unique IP address. It\u2019s this address that each Internet Service Provider uses to forward internet requests to a specific home or business.", 
            "title": "What is a public IP address?"
        }, 
        {
            "location": "/blog/understanding-iaas-paas-saas/", 
            "text": "Understanding IAAS, PAAS and SAAS\n\n\nInfrastructure As A Service\n\n\nInfrastructure as a service (IaaS) is an instant computing infrastructure, provisioned and managed over the Internet. Quickly scale up and down with demand, and pay only for what you use.\n\n\nIaaS helps you avoid the expense and complexity of buying and managing your own physical servers and other datacenter infrastructure. Each resource is offered as a separate service component, and you only need to rent a particular one for as long as you need it. The cloud computing service provider manages the infrastructure, while you purchase, install, configure, and manage your own software\u2014operating systems, middleware, and applications.\n\n\n\n\nPlatform As A Service\n\n\nPlatform as a service (PaaS) is a complete development and deployment environment in the cloud, with resources that enable you to deliver everything from simple cloud-based apps to sophisticated, cloud-enabled enterprise applications. You purchase the resources you need from a cloud service provider on a pay-as-you-go basis and access them over a secure Internet connection.\n\n\nLike IaaS, PaaS includes infrastructure\u2014servers, storage, and networking\u2014but also middleware, development tools, business intelligence (BI) services, database management systems, and more. PaaS is designed to support the complete web application lifecycle: building, testing, deploying, managing, and updating.\n\n\nPaaS allows you to avoid the expense and complexity of buying and managing software licenses, the underlying application infrastructure and middleware or the development tools and other resources. You manage the applications and services you develop, and the cloud service provider typically manages everything else.\n\n\nSoftware As A Service\n\n\nSoftware as a service (SaaS) allows users to connect to and use cloud-based apps over the Internet. Common examples are email, calendaring, and office tools (such as Microsoft Office 365).\n\n\nSaaS provides a complete software solution that you purchase on a pay-as-you-go basis from a cloud service provider. You rent the use of an app for your organization, and your users connect to it over the Internet, usually with a web browser. All of the underlying infrastructure, middleware, app software, and app data are located in the service provider\u2019s data center. The service provider manages the hardware and software, and with the appropriate service agreement, will ensure the availability and the security of the app and your data as well. SaaS allows your organization to get quickly up and running with an app at minimal upfront cost.\n\n\n\n\nReferences\n\n\n\n\nMicrosoft Azure documentation\n\n\nIBM cloud learn", 
            "title": "Understanding IAAS, PAAS and SAAS"
        }, 
        {
            "location": "/blog/understanding-iaas-paas-saas/#understanding-iaas-paas-and-saas", 
            "text": "", 
            "title": "Understanding IAAS, PAAS and SAAS"
        }, 
        {
            "location": "/blog/understanding-iaas-paas-saas/#infrastructure-as-a-service", 
            "text": "Infrastructure as a service (IaaS) is an instant computing infrastructure, provisioned and managed over the Internet. Quickly scale up and down with demand, and pay only for what you use.  IaaS helps you avoid the expense and complexity of buying and managing your own physical servers and other datacenter infrastructure. Each resource is offered as a separate service component, and you only need to rent a particular one for as long as you need it. The cloud computing service provider manages the infrastructure, while you purchase, install, configure, and manage your own software\u2014operating systems, middleware, and applications.", 
            "title": "Infrastructure As A Service"
        }, 
        {
            "location": "/blog/understanding-iaas-paas-saas/#platform-as-a-service", 
            "text": "Platform as a service (PaaS) is a complete development and deployment environment in the cloud, with resources that enable you to deliver everything from simple cloud-based apps to sophisticated, cloud-enabled enterprise applications. You purchase the resources you need from a cloud service provider on a pay-as-you-go basis and access them over a secure Internet connection.  Like IaaS, PaaS includes infrastructure\u2014servers, storage, and networking\u2014but also middleware, development tools, business intelligence (BI) services, database management systems, and more. PaaS is designed to support the complete web application lifecycle: building, testing, deploying, managing, and updating.  PaaS allows you to avoid the expense and complexity of buying and managing software licenses, the underlying application infrastructure and middleware or the development tools and other resources. You manage the applications and services you develop, and the cloud service provider typically manages everything else.", 
            "title": "Platform As A Service"
        }, 
        {
            "location": "/blog/understanding-iaas-paas-saas/#software-as-a-service", 
            "text": "Software as a service (SaaS) allows users to connect to and use cloud-based apps over the Internet. Common examples are email, calendaring, and office tools (such as Microsoft Office 365).  SaaS provides a complete software solution that you purchase on a pay-as-you-go basis from a cloud service provider. You rent the use of an app for your organization, and your users connect to it over the Internet, usually with a web browser. All of the underlying infrastructure, middleware, app software, and app data are located in the service provider\u2019s data center. The service provider manages the hardware and software, and with the appropriate service agreement, will ensure the availability and the security of the app and your data as well. SaaS allows your organization to get quickly up and running with an app at minimal upfront cost.", 
            "title": "Software As A Service"
        }, 
        {
            "location": "/blog/understanding-iaas-paas-saas/#references", 
            "text": "Microsoft Azure documentation  IBM cloud learn", 
            "title": "References"
        }, 
        {
            "location": "/docker/", 
            "text": "Docker\n\n\nOverview\n\n\nDocker is the world\u2019s leading software container platform. Developers use Docker to eliminate \u201cworks on my machine\u201d problems when collaborating on code with co-workers. Operators use Docker to run and manage apps side-by-side in isolated containers to get better compute density. Enterprises use Docker to build agile software delivery pipelines to ship new features faster, more securely and with confidence for both Linux and Windows Server apps.\n\n\n...more information\n\n\nWhat is a Container?\n\n\nUsing containers, everything required to make a piece of software run is packaged into isolated containers. Unlike VMs, containers do not bundle a full operating system - only libraries and settings required to make the software work are needed. This makes for efficient, lightweight, self-contained systems and guarantees that software will always run the same, regardless of where it\u2019s deployed.\n\n\n...more information\n\n\nVirtual Machine v/s Containers\n\n\n\n\n\n\nWhat makes docker different that VMs?\n\n\n\n\nGet Started with Docker\n\n\nPlease follow the \ngetting started guide\n.\n\n\nMandatory Reading\n\n\n\n\nDockerfile reference\n\n\nDockerfile best practices\n\n\nDockerfile linting\n\n\n\n\nFurther Reading\n\n\n\n\nTwelve Factor Container\n\n\nDocker metrics Prometheus\n\n\nDocker Datacenter (Docker EE)\n\n\nDocker Swarm Tutorials\n\n\nViktor Farcic's Presentations and Workshops", 
            "title": "Home"
        }, 
        {
            "location": "/docker/#docker", 
            "text": "", 
            "title": "Docker"
        }, 
        {
            "location": "/docker/#overview", 
            "text": "Docker is the world\u2019s leading software container platform. Developers use Docker to eliminate \u201cworks on my machine\u201d problems when collaborating on code with co-workers. Operators use Docker to run and manage apps side-by-side in isolated containers to get better compute density. Enterprises use Docker to build agile software delivery pipelines to ship new features faster, more securely and with confidence for both Linux and Windows Server apps.  ...more information", 
            "title": "Overview"
        }, 
        {
            "location": "/docker/#what-is-a-container", 
            "text": "Using containers, everything required to make a piece of software run is packaged into isolated containers. Unlike VMs, containers do not bundle a full operating system - only libraries and settings required to make the software work are needed. This makes for efficient, lightweight, self-contained systems and guarantees that software will always run the same, regardless of where it\u2019s deployed.  ...more information", 
            "title": "What is a Container?"
        }, 
        {
            "location": "/docker/#virtual-machine-vs-containers", 
            "text": "What makes docker different that VMs?", 
            "title": "Virtual Machine v/s Containers"
        }, 
        {
            "location": "/docker/#get-started-with-docker", 
            "text": "Please follow the  getting started guide .", 
            "title": "Get Started with Docker"
        }, 
        {
            "location": "/docker/#mandatory-reading", 
            "text": "Dockerfile reference  Dockerfile best practices  Dockerfile linting", 
            "title": "Mandatory Reading"
        }, 
        {
            "location": "/docker/#further-reading", 
            "text": "Twelve Factor Container  Docker metrics Prometheus  Docker Datacenter (Docker EE)  Docker Swarm Tutorials  Viktor Farcic's Presentations and Workshops", 
            "title": "Further Reading"
        }, 
        {
            "location": "/docker/docker-compose/", 
            "text": "Docker Compose\n\n\nOverview\n\n\nCompose is a tool for defining and running multi-container Docker applications. With Compose, you use a Compose file to configure your application\u2019s services. Then, using a single command, you create and start all the services from your configuration.\n\n\nUsing Compose is basically a three-step process:\n\n\n\n\nDefine your app\u2019s environment with a Dockerfile so it can be reproduced anywhere.\n\n\nDefine the services that make up your app in docker-compose.yml so they can be run together in an isolated environment.\n\n\nLastly, run docker-compose up and Compose will start and run your entire app.\n\n\n\n\nA docker-compose.yml looks like \nthis", 
            "title": "Docker compose"
        }, 
        {
            "location": "/docker/docker-compose/#docker-compose", 
            "text": "", 
            "title": "Docker Compose"
        }, 
        {
            "location": "/docker/docker-compose/#overview", 
            "text": "Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a Compose file to configure your application\u2019s services. Then, using a single command, you create and start all the services from your configuration.  Using Compose is basically a three-step process:   Define your app\u2019s environment with a Dockerfile so it can be reproduced anywhere.  Define the services that make up your app in docker-compose.yml so they can be run together in an isolated environment.  Lastly, run docker-compose up and Compose will start and run your entire app.   A docker-compose.yml looks like  this", 
            "title": "Overview"
        }, 
        {
            "location": "/docker/docker-machine/", 
            "text": "Docker Machine\n\n\nWhat is Docker Machine?\n\n\nDocker Machine is a tool that lets you install Docker Engine on virtual hosts, and manage the hosts with docker-machine commands. You can use Machine to create Docker hosts on your local Mac or Windows box, on your company network, in your data center, or on cloud providers like AWS or Digital Ocean.\nUsing docker-machine commands, you can start, inspect, stop, and restart a managed host, upgrade the Docker client and daemon, and configure a Docker client to talk to your host.", 
            "title": "Docker machine"
        }, 
        {
            "location": "/docker/docker-machine/#docker-machine", 
            "text": "", 
            "title": "Docker Machine"
        }, 
        {
            "location": "/docker/docker-machine/#what-is-docker-machine", 
            "text": "Docker Machine is a tool that lets you install Docker Engine on virtual hosts, and manage the hosts with docker-machine commands. You can use Machine to create Docker hosts on your local Mac or Windows box, on your company network, in your data center, or on cloud providers like AWS or Digital Ocean.\nUsing docker-machine commands, you can start, inspect, stop, and restart a managed host, upgrade the Docker client and daemon, and configure a Docker client to talk to your host.", 
            "title": "What is Docker Machine?"
        }, 
        {
            "location": "/docker/docker-networks/", 
            "text": "Docker Networks\n\n\nThis section provides an overview of Docker\u2019s default networking behavior, including the type of networks created by default and how to create your own user-defined networks. It also describes the resources required to create networks on a single host or across a cluster of hosts.\n\n\nDefault Networks\n\n\nWhen you install Docker, it creates three networks automatically. You can list these networks using the docker network ls command:\n\n\n1\n2\n3\n4\n5\n6\n$ docker network ls\n\nNETWORK ID          NAME                DRIVER\n7fca4eb8c647        bridge              bridge\n9f904ee27bf5        none                null\ncf03ee007fb4        host                host\n\n\n\n\n\n\n...more information\n\n\nUser-defined networks\n\n\nIt is recommended to use user-defined bridge networks to control which containers can communicate with each other, and also to enable automatic DNS resolution of container names to IP addresses.\n\n\n...more information\n\n\nBridge networks\n\n\nA bridge network is the most common type of network used in Docker. Bridge networks are similar to the default bridge network, but add some new features and remove some old abilities. The following examples create some bridge networks and perform some experiments on containers on these networks.\n\n\n1\n2\ndocker network create --driver bridge isolated_nw\ndocker network inspect isolated_nw\n\n\n\n\n\n\nAfter you create the network, you can launch containers on it using the docker run \n--network=\nNETWORK\n option.", 
            "title": "Docker networks"
        }, 
        {
            "location": "/docker/docker-networks/#docker-networks", 
            "text": "This section provides an overview of Docker\u2019s default networking behavior, including the type of networks created by default and how to create your own user-defined networks. It also describes the resources required to create networks on a single host or across a cluster of hosts.", 
            "title": "Docker Networks"
        }, 
        {
            "location": "/docker/docker-networks/#default-networks", 
            "text": "When you install Docker, it creates three networks automatically. You can list these networks using the docker network ls command:  1\n2\n3\n4\n5\n6 $ docker network ls\n\nNETWORK ID          NAME                DRIVER\n7fca4eb8c647        bridge              bridge\n9f904ee27bf5        none                null\ncf03ee007fb4        host                host   ...more information", 
            "title": "Default Networks"
        }, 
        {
            "location": "/docker/docker-networks/#user-defined-networks", 
            "text": "It is recommended to use user-defined bridge networks to control which containers can communicate with each other, and also to enable automatic DNS resolution of container names to IP addresses.  ...more information", 
            "title": "User-defined networks"
        }, 
        {
            "location": "/docker/docker-networks/#bridge-networks", 
            "text": "A bridge network is the most common type of network used in Docker. Bridge networks are similar to the default bridge network, but add some new features and remove some old abilities. The following examples create some bridge networks and perform some experiments on containers on these networks.  1\n2 docker network create --driver bridge isolated_nw\ndocker network inspect isolated_nw   After you create the network, you can launch containers on it using the docker run  --network= NETWORK  option.", 
            "title": "Bridge networks"
        }, 
        {
            "location": "/docker/docker-secrets/", 
            "text": "Docker Secrets\n\nhttps://docs.docker.com/engine/swarm/secrets/#how-docker-manages-secrets", 
            "title": "Docker secrets"
        }, 
        {
            "location": "/aws/global-infrastructure/", 
            "text": "AWS Global Infrastructure\n\n\nUnderstanding the difference between a region, an Availabity Zone (AZ) and an Edge Location\n\n\n\n\nA region is a physical location in the world which consists of two or more Availability Zones.\n\n\nAn Availability Zone is one or more discrete data centers, each with redundant power, networking and connectivity, housed in separate facilities.\n\n\nEdge locations are endpoints for AWS which are used for cacheing content. Typically it consists of CloudFront which is Amazon's Content Delivery Network (CDN)", 
            "title": "Zones"
        }, 
        {
            "location": "/aws/global-infrastructure/#aws-global-infrastructure", 
            "text": "", 
            "title": "AWS Global Infrastructure"
        }, 
        {
            "location": "/aws/global-infrastructure/#understanding-the-difference-between-a-region-an-availabity-zone-az-and-an-edge-location", 
            "text": "A region is a physical location in the world which consists of two or more Availability Zones.  An Availability Zone is one or more discrete data centers, each with redundant power, networking and connectivity, housed in separate facilities.  Edge locations are endpoints for AWS which are used for cacheing content. Typically it consists of CloudFront which is Amazon's Content Delivery Network (CDN)", 
            "title": "Understanding the difference between a region, an Availabity Zone (AZ) and an Edge Location"
        }, 
        {
            "location": "/aws/services/", 
            "text": "AWS Services\n\n\nCompute\n\n\nEC2 : ELastic Compute Cloud\n\n\nVirtual servers inside the AWS platform\n\n\nECS : Elastic Container Services\n\n\nRun and manage docker containers\n\n\nEC2 Auto Scaling\n\n\nScale compute capacity to meet demands.\n\n\nElastic Beanstalk\n\n\nRun and manage webapps.\nFor people who do not want to unstand how AWS works and who only care about their application.\n\n\nLambda\n\n\nRun you code in response to events.\n\n\nLightsail\n\n\nLaunch and manage virtual private servers (VPS).\nFor people who dont really want to understand AWS and the underlying infrastructure. They dont want to know about VPC's and security groups.\nThis service will just provision you with a server, A fixed IP addrres for loging.\nComes with a management console for managing the server.\n\n\nBatch\n\n\nRun batch jobs at any scale\nBatch computing on the cloud.\n\n\nStorage\n\n\nS3 [Simple storage service]\n\n\nOne of the oldest storage service.\nObject based storage. There are buckets and data is uploaded to the buckets.\n\n\nEFS [Elastic file system]\n\n\nBasically Network Attached storage. Can mount them to multiple virtual machines.\n\n\nGlacier\n\n\nFor data Archieving.\n\n\nSnowball\n\n\nMove GB's of data to the Amazon data center without using broadband line or wifi. Write it phisically to a disk.\n\n\nStorage gateway\n\n\nAre basicall virtual applicances that will replicate data back to S3.\nThere are 4 diff types.\n\n\nDatabase\n\n\nRDS [Relation database service]\n\n\nThis will be things like Mysql, postgres, Oracle etc.\n\n\nDynamo DB\n\n\nNon relational db (will be covered later)\n\n\nElasticache\n\n\nFor caching commonly executed queries.\nWill freeup the db service you a\n\n\nRedshift\n\n\nFor data warehousing and business intelligence.\nFor making very complex queries.\n\n\nMigration\n\n\nAWS migration hub\n\n\nAllows you to track you applications as you move your application to AWS and integrated with other services of the migration framework.\nFor visualizing the progress of your migration\n\n\nApplication discovery  service\n\n\nDetects the applications you have along with their depencies. For example if you have a sonarqube server it may have a dependency on a sql server or a domain controller.\nThus its a way of tracking dependencies for your application.\n\n\nDatabase Migration service\n\n\nVery easy way to migrate on premise databases to AWS\n\n\nServer migration service\n\n\nhelps you to migrate your virtual and physical server to the AWS cloud\n\n\nSnowball\n\n\nHelps you to migrate large chunks of data into the cloud.\n\n\nNetworking and content delivery\n\n\nVPC\n\n\nAmazon Virtual private cloud. Can be considered as a virtual datacenter.\nConfigure firewall, availability zones, network sider address ranges,  Network ACL's, route tables etc.\nIt is pretty complicated to understand. (V IMP)\nFundamental and inportant part.\n\n\nCloudFront\n\n\nAmazons content delivery network service.\n\n\nRoute 53\n\n\nAmazons DNS service.\n\n\nAPI Gateway\n\n\nFor creating a serverless website using polly.\nA way of creating your own API for other services to talk to\n\n\nDirect connect\n\n\nIs a way of running a dedicated line from your Corporate head office or data center to AWS.\n\n\nDeveloper tools\n\n\nCodeStar\n\n\nProject managing your code. For colaborating with other developers.\n\n\nCodeCommit\n\n\nA place to store your code\n\n\nCodeBuild\n\n\nCompiles the code and run tests against it to producte software packages.\n\n\nCodeDeploy\n\n\nAutomates code deployment to your EC2 and on premise servers.\n\n\nCodePipeline\n\n\nContinuous delivery server to visualize and automate the steps required to release your software.\n\n\nX-Ray\n\n\nTo debug and analyse serverless applications.\n\n\nCloud9\n\n\nThis is a IDE environment. A place where you can develop your code withing your web browser in AWS.\n\n\nManagement tools\n\n\nCloudWatch\n\n\nIs a monitoring service.\n\n\nCloudFormation\n\n\nIt is a way of scripting infrastructure.\nWith a cloudformation template to deploy your applications.\nReusable.\n\n\nCloudTrail\n\n\nLog changes to your AWS environment.\nIts turned on by default and it keeps the chages trail for a week.\nIf turned on it makes it easy to determine if your environment is hacked.\n\n\nConfig\n\n\nMonitors the configuration of your AWS environment.\nMaintains a snapshot thus making it possible to move back and forward across weeks. \nVisualise your AWS environments.\n\n\nOpsWorks\n\n\nSimilar to elastic beanstack.\nUser chef and puppet to automate the environment.\n\n\nService catalog\n\n\nA way for managing a catalog of service allowed to use on the AWS environment.\nVirtual server images, Operating systems. databases etc\nBasically used by big organizations for governance and compliance requirements\n\n\nSystems Manager\n\n\nInterface for maintaining your AWS resources.\nTypically used for EC2.\nFor patch maintenance eg: security patches across thousands of EC2 instances.\nCan group all the resources by different departments or applications.\n\n\nTrusted Advisor\n\n\nWould give you advice on multiple deciplines like security, would advice if you have left any ports open that could be a risk. It can tell you how you can save money on AWS.\nCan be thought of as an Advisor or an accountant that you trust and that gives you the best advice on your AWS envieonment.\n\n\nManaged services\n\n\nAmazon provides managed services for AWS, i.e., if you do not want to worry about your EC2 instances or the auto scale feature you can opt for the managed services.\n\n\nMachine Learnig\n\n\nPolly\n\n\nturns text into speech\nCan choose different languages\n\n\nLex\n\n\nAlexa service\n\n\nRekognition\n\n\nCan upload a picture and it will let you whats there in the picture.\n\n\nTranslate\n\n\nTranslate languages\nsimilar to google translate\n\n\nTranscribe\n\n\nAutomatic speech recognition\nTurns speech into text\n\n\nAnalytics\n\n\nAthena\n\n\nLooks through the S3 bucket data and returns results.\n\n\nEMR [Elastic Map Reduce]\n\n\nfor processing large amounts of data for big data solutions.\n\n\nCloudSearch and Elastic Search Service\n\n\nSearch services for AWS\n\n\nKinesis\n\n\nWay of ingesting large amount of data into AWS. Social media feeds etc.\n\n\nQuickSight\n\n\nAmazons business intelligence tool.\n\n\nData pipeline\n\n\nMoving data between diff AWS services.\n\n\nGlue\n\n\nUsed for ETL [Extract transform and load]\n\n\nSecurity, Identity and Compliance\n\n\nIAM [Identity and Access management]\n\n\nCognito\n\n\nIs a way of doing device authentication.\nAuthenticate using FB gmail etc.\nUse Cognito as a authentication service to get temp access to AWS resources.\n\n\nGuardDuty\n\n\nIt monitors for malicious activities on your AWS environment.\n\n\nInspector\n\n\nInstalled on Virtual machines and EC2 instances to run a whole bunch of tests agains it to check for security vulnerabilities.\nCan be scheduled to run weekly, monthly..\nGenerates a report and gives you a severity report of the vulnerabilities.\n\n\nMAcie\n\n\nwill scan your s3 bucked to look for things that contain a personally identifiable information PII like names, adresses, passport numbers etc and alert you.\n\n\nCertificate Manager\n\n\nGet ssl certificates for free if your using AWS services and registering the domains through route 53.\nManaging SSL certificates.\n\n\nCloudHSM\n\n\nHSM [Hardware Security Modules]\nDedicated bits of hardware used to store your keys eg: private and public keys.\nThe keys may be used to access your EC2 instances. Can used these keys to encrypy AWS objects.\n\n\nDirectory Service\n\n\nA way of integration AD with AWS services.\n\n\nWAF : Web Application Firewall\n\n\nPrevents cross site scripting, SQL injections etc. Prevents malicious users.\n\n\nShield\n\n\nShield is basically DDOS mitigation.\n\n\nArtifact\n\n\nFor Audit and compliance. Way of downloading and inspecting Amazons documentation.\n\n\nMobile services\n\n\nMobile hub\n\n\nmanagement console for mobile applications.\n\n\nPinpoint\n\n\nNew service\nUse targetted push notification\n\n\nAppSync\n\n\nUpdates web and mobile data. Updates data when the phone comes back online.\n\n\nDevice Farm\n\n\nTest mobile application on real android and ios devices\n\n\nMobile Analytics\n\n\nAnalytics for your mobile application\n\n\nApplication Integration\n\n\nStep functions\n\n\nManaging your lamda function and manage the steps to go through it.\n\n\nAmazon MQ\n\n\nFor message queues. similar to Rabbit MQ.\n\n\nSNS\n\n\nA notification service. Will be setting a billing alarm.\n\n\nSQS\n\n\nOne of the oldest services.\nA way of decoupling your infrastructure.\n\n\nSWF :Simple Workflow Service\n\n\nCustomer engagement\n\n\nConnect\n\n\nA contact center as a service. Similar to having a call center on the cloud.\n\n\nSimple email service\n\n\nA great way of sending large amount of emails.\n\n\nBusiness Productivity\n\n\nAlexa for Business\n\n\nUse it to dial into a meeting room\n\n\nChime\n\n\nLike google hangout. Record meetings.\n\n\nWork Docs\n\n\nLike a dropbox in AWS\n\n\nWorkMail\n\n\nLike office 365\n\n\nDesktop and App Streaming\n\n\nWorkspaces\n\n\nIs a VDI solution. Accessing a desktop on the cloud on your device.\n\n\nAppStream 2.0\n\n\nWay of live streaming the application. Like Citrix.\n\n\nIOT Internet Of Things\n\n\niOT\n\n\niOT Device Management\n\n\nFreeRTOS\n\n\nGreengrass\n\n\nGame Development\n\n\nGameLift\n\n\nService to help you develop a game.", 
            "title": "Services"
        }, 
        {
            "location": "/aws/services/#aws-services", 
            "text": "", 
            "title": "AWS Services"
        }, 
        {
            "location": "/aws/services/#compute", 
            "text": "", 
            "title": "Compute"
        }, 
        {
            "location": "/aws/services/#ec2-elastic-compute-cloud", 
            "text": "Virtual servers inside the AWS platform", 
            "title": "EC2 : ELastic Compute Cloud"
        }, 
        {
            "location": "/aws/services/#ecs-elastic-container-services", 
            "text": "Run and manage docker containers", 
            "title": "ECS : Elastic Container Services"
        }, 
        {
            "location": "/aws/services/#ec2-auto-scaling", 
            "text": "Scale compute capacity to meet demands.", 
            "title": "EC2 Auto Scaling"
        }, 
        {
            "location": "/aws/services/#elastic-beanstalk", 
            "text": "Run and manage webapps.\nFor people who do not want to unstand how AWS works and who only care about their application.", 
            "title": "Elastic Beanstalk"
        }, 
        {
            "location": "/aws/services/#lambda", 
            "text": "Run you code in response to events.", 
            "title": "Lambda"
        }, 
        {
            "location": "/aws/services/#lightsail", 
            "text": "Launch and manage virtual private servers (VPS).\nFor people who dont really want to understand AWS and the underlying infrastructure. They dont want to know about VPC's and security groups.\nThis service will just provision you with a server, A fixed IP addrres for loging.\nComes with a management console for managing the server.", 
            "title": "Lightsail"
        }, 
        {
            "location": "/aws/services/#batch", 
            "text": "Run batch jobs at any scale\nBatch computing on the cloud.", 
            "title": "Batch"
        }, 
        {
            "location": "/aws/services/#storage", 
            "text": "", 
            "title": "Storage"
        }, 
        {
            "location": "/aws/services/#s3-simple-storage-service", 
            "text": "One of the oldest storage service.\nObject based storage. There are buckets and data is uploaded to the buckets.", 
            "title": "S3 [Simple storage service]"
        }, 
        {
            "location": "/aws/services/#efs-elastic-file-system", 
            "text": "Basically Network Attached storage. Can mount them to multiple virtual machines.", 
            "title": "EFS [Elastic file system]"
        }, 
        {
            "location": "/aws/services/#glacier", 
            "text": "For data Archieving.", 
            "title": "Glacier"
        }, 
        {
            "location": "/aws/services/#snowball", 
            "text": "Move GB's of data to the Amazon data center without using broadband line or wifi. Write it phisically to a disk.", 
            "title": "Snowball"
        }, 
        {
            "location": "/aws/services/#storage-gateway", 
            "text": "Are basicall virtual applicances that will replicate data back to S3.\nThere are 4 diff types.", 
            "title": "Storage gateway"
        }, 
        {
            "location": "/aws/services/#database", 
            "text": "", 
            "title": "Database"
        }, 
        {
            "location": "/aws/services/#rds-relation-database-service", 
            "text": "This will be things like Mysql, postgres, Oracle etc.", 
            "title": "RDS [Relation database service]"
        }, 
        {
            "location": "/aws/services/#dynamo-db", 
            "text": "Non relational db (will be covered later)", 
            "title": "Dynamo DB"
        }, 
        {
            "location": "/aws/services/#elasticache", 
            "text": "For caching commonly executed queries.\nWill freeup the db service you a", 
            "title": "Elasticache"
        }, 
        {
            "location": "/aws/services/#redshift", 
            "text": "For data warehousing and business intelligence.\nFor making very complex queries.", 
            "title": "Redshift"
        }, 
        {
            "location": "/aws/services/#migration", 
            "text": "", 
            "title": "Migration"
        }, 
        {
            "location": "/aws/services/#aws-migration-hub", 
            "text": "Allows you to track you applications as you move your application to AWS and integrated with other services of the migration framework.\nFor visualizing the progress of your migration", 
            "title": "AWS migration hub"
        }, 
        {
            "location": "/aws/services/#application-discovery-service", 
            "text": "Detects the applications you have along with their depencies. For example if you have a sonarqube server it may have a dependency on a sql server or a domain controller.\nThus its a way of tracking dependencies for your application.", 
            "title": "Application discovery  service"
        }, 
        {
            "location": "/aws/services/#database-migration-service", 
            "text": "Very easy way to migrate on premise databases to AWS", 
            "title": "Database Migration service"
        }, 
        {
            "location": "/aws/services/#server-migration-service", 
            "text": "helps you to migrate your virtual and physical server to the AWS cloud", 
            "title": "Server migration service"
        }, 
        {
            "location": "/aws/services/#snowball_1", 
            "text": "Helps you to migrate large chunks of data into the cloud.", 
            "title": "Snowball"
        }, 
        {
            "location": "/aws/services/#networking-and-content-delivery", 
            "text": "", 
            "title": "Networking and content delivery"
        }, 
        {
            "location": "/aws/services/#vpc", 
            "text": "Amazon Virtual private cloud. Can be considered as a virtual datacenter.\nConfigure firewall, availability zones, network sider address ranges,  Network ACL's, route tables etc.\nIt is pretty complicated to understand. (V IMP)\nFundamental and inportant part.", 
            "title": "VPC"
        }, 
        {
            "location": "/aws/services/#cloudfront", 
            "text": "Amazons content delivery network service.", 
            "title": "CloudFront"
        }, 
        {
            "location": "/aws/services/#route-53", 
            "text": "Amazons DNS service.", 
            "title": "Route 53"
        }, 
        {
            "location": "/aws/services/#api-gateway", 
            "text": "For creating a serverless website using polly.\nA way of creating your own API for other services to talk to  Direct connect  Is a way of running a dedicated line from your Corporate head office or data center to AWS.", 
            "title": "API Gateway"
        }, 
        {
            "location": "/aws/services/#developer-tools", 
            "text": "", 
            "title": "Developer tools"
        }, 
        {
            "location": "/aws/services/#codestar", 
            "text": "Project managing your code. For colaborating with other developers.", 
            "title": "CodeStar"
        }, 
        {
            "location": "/aws/services/#codecommit", 
            "text": "A place to store your code", 
            "title": "CodeCommit"
        }, 
        {
            "location": "/aws/services/#codebuild", 
            "text": "Compiles the code and run tests against it to producte software packages.", 
            "title": "CodeBuild"
        }, 
        {
            "location": "/aws/services/#codedeploy", 
            "text": "Automates code deployment to your EC2 and on premise servers.", 
            "title": "CodeDeploy"
        }, 
        {
            "location": "/aws/services/#codepipeline", 
            "text": "Continuous delivery server to visualize and automate the steps required to release your software.", 
            "title": "CodePipeline"
        }, 
        {
            "location": "/aws/services/#x-ray", 
            "text": "To debug and analyse serverless applications.", 
            "title": "X-Ray"
        }, 
        {
            "location": "/aws/services/#cloud9", 
            "text": "This is a IDE environment. A place where you can develop your code withing your web browser in AWS.", 
            "title": "Cloud9"
        }, 
        {
            "location": "/aws/services/#management-tools", 
            "text": "", 
            "title": "Management tools"
        }, 
        {
            "location": "/aws/services/#cloudwatch", 
            "text": "Is a monitoring service.", 
            "title": "CloudWatch"
        }, 
        {
            "location": "/aws/services/#cloudformation", 
            "text": "It is a way of scripting infrastructure.\nWith a cloudformation template to deploy your applications.\nReusable.", 
            "title": "CloudFormation"
        }, 
        {
            "location": "/aws/services/#cloudtrail", 
            "text": "Log changes to your AWS environment.\nIts turned on by default and it keeps the chages trail for a week.\nIf turned on it makes it easy to determine if your environment is hacked.", 
            "title": "CloudTrail"
        }, 
        {
            "location": "/aws/services/#config", 
            "text": "Monitors the configuration of your AWS environment.\nMaintains a snapshot thus making it possible to move back and forward across weeks. \nVisualise your AWS environments.", 
            "title": "Config"
        }, 
        {
            "location": "/aws/services/#opsworks", 
            "text": "Similar to elastic beanstack.\nUser chef and puppet to automate the environment.", 
            "title": "OpsWorks"
        }, 
        {
            "location": "/aws/services/#service-catalog", 
            "text": "A way for managing a catalog of service allowed to use on the AWS environment.\nVirtual server images, Operating systems. databases etc\nBasically used by big organizations for governance and compliance requirements", 
            "title": "Service catalog"
        }, 
        {
            "location": "/aws/services/#systems-manager", 
            "text": "Interface for maintaining your AWS resources.\nTypically used for EC2.\nFor patch maintenance eg: security patches across thousands of EC2 instances.\nCan group all the resources by different departments or applications.", 
            "title": "Systems Manager"
        }, 
        {
            "location": "/aws/services/#trusted-advisor", 
            "text": "Would give you advice on multiple deciplines like security, would advice if you have left any ports open that could be a risk. It can tell you how you can save money on AWS.\nCan be thought of as an Advisor or an accountant that you trust and that gives you the best advice on your AWS envieonment.", 
            "title": "Trusted Advisor"
        }, 
        {
            "location": "/aws/services/#managed-services", 
            "text": "Amazon provides managed services for AWS, i.e., if you do not want to worry about your EC2 instances or the auto scale feature you can opt for the managed services.", 
            "title": "Managed services"
        }, 
        {
            "location": "/aws/services/#machine-learnig", 
            "text": "", 
            "title": "Machine Learnig"
        }, 
        {
            "location": "/aws/services/#polly", 
            "text": "turns text into speech\nCan choose different languages", 
            "title": "Polly"
        }, 
        {
            "location": "/aws/services/#lex", 
            "text": "Alexa service", 
            "title": "Lex"
        }, 
        {
            "location": "/aws/services/#rekognition", 
            "text": "Can upload a picture and it will let you whats there in the picture.", 
            "title": "Rekognition"
        }, 
        {
            "location": "/aws/services/#translate", 
            "text": "Translate languages\nsimilar to google translate", 
            "title": "Translate"
        }, 
        {
            "location": "/aws/services/#transcribe", 
            "text": "Automatic speech recognition\nTurns speech into text", 
            "title": "Transcribe"
        }, 
        {
            "location": "/aws/services/#analytics", 
            "text": "", 
            "title": "Analytics"
        }, 
        {
            "location": "/aws/services/#athena", 
            "text": "Looks through the S3 bucket data and returns results.", 
            "title": "Athena"
        }, 
        {
            "location": "/aws/services/#emr-elastic-map-reduce", 
            "text": "for processing large amounts of data for big data solutions.", 
            "title": "EMR [Elastic Map Reduce]"
        }, 
        {
            "location": "/aws/services/#cloudsearch-and-elastic-search-service", 
            "text": "Search services for AWS", 
            "title": "CloudSearch and Elastic Search Service"
        }, 
        {
            "location": "/aws/services/#kinesis", 
            "text": "Way of ingesting large amount of data into AWS. Social media feeds etc.", 
            "title": "Kinesis"
        }, 
        {
            "location": "/aws/services/#quicksight", 
            "text": "Amazons business intelligence tool.", 
            "title": "QuickSight"
        }, 
        {
            "location": "/aws/services/#data-pipeline", 
            "text": "Moving data between diff AWS services.", 
            "title": "Data pipeline"
        }, 
        {
            "location": "/aws/services/#glue", 
            "text": "Used for ETL [Extract transform and load]", 
            "title": "Glue"
        }, 
        {
            "location": "/aws/services/#security-identity-and-compliance", 
            "text": "", 
            "title": "Security, Identity and Compliance"
        }, 
        {
            "location": "/aws/services/#iam-identity-and-access-management", 
            "text": "", 
            "title": "IAM [Identity and Access management]"
        }, 
        {
            "location": "/aws/services/#cognito", 
            "text": "Is a way of doing device authentication.\nAuthenticate using FB gmail etc.\nUse Cognito as a authentication service to get temp access to AWS resources.", 
            "title": "Cognito"
        }, 
        {
            "location": "/aws/services/#guardduty", 
            "text": "It monitors for malicious activities on your AWS environment.", 
            "title": "GuardDuty"
        }, 
        {
            "location": "/aws/services/#inspector", 
            "text": "Installed on Virtual machines and EC2 instances to run a whole bunch of tests agains it to check for security vulnerabilities.\nCan be scheduled to run weekly, monthly..\nGenerates a report and gives you a severity report of the vulnerabilities.", 
            "title": "Inspector"
        }, 
        {
            "location": "/aws/services/#macie", 
            "text": "will scan your s3 bucked to look for things that contain a personally identifiable information PII like names, adresses, passport numbers etc and alert you.", 
            "title": "MAcie"
        }, 
        {
            "location": "/aws/services/#certificate-manager", 
            "text": "Get ssl certificates for free if your using AWS services and registering the domains through route 53.\nManaging SSL certificates.", 
            "title": "Certificate Manager"
        }, 
        {
            "location": "/aws/services/#cloudhsm", 
            "text": "HSM [Hardware Security Modules]\nDedicated bits of hardware used to store your keys eg: private and public keys.\nThe keys may be used to access your EC2 instances. Can used these keys to encrypy AWS objects.", 
            "title": "CloudHSM"
        }, 
        {
            "location": "/aws/services/#directory-service", 
            "text": "A way of integration AD with AWS services.", 
            "title": "Directory Service"
        }, 
        {
            "location": "/aws/services/#waf-web-application-firewall", 
            "text": "Prevents cross site scripting, SQL injections etc. Prevents malicious users.", 
            "title": "WAF : Web Application Firewall"
        }, 
        {
            "location": "/aws/services/#shield", 
            "text": "Shield is basically DDOS mitigation.", 
            "title": "Shield"
        }, 
        {
            "location": "/aws/services/#artifact", 
            "text": "For Audit and compliance. Way of downloading and inspecting Amazons documentation.", 
            "title": "Artifact"
        }, 
        {
            "location": "/aws/services/#mobile-services", 
            "text": "", 
            "title": "Mobile services"
        }, 
        {
            "location": "/aws/services/#mobile-hub", 
            "text": "management console for mobile applications.", 
            "title": "Mobile hub"
        }, 
        {
            "location": "/aws/services/#pinpoint", 
            "text": "New service\nUse targetted push notification", 
            "title": "Pinpoint"
        }, 
        {
            "location": "/aws/services/#appsync", 
            "text": "Updates web and mobile data. Updates data when the phone comes back online.", 
            "title": "AppSync"
        }, 
        {
            "location": "/aws/services/#device-farm", 
            "text": "Test mobile application on real android and ios devices", 
            "title": "Device Farm"
        }, 
        {
            "location": "/aws/services/#mobile-analytics", 
            "text": "Analytics for your mobile application", 
            "title": "Mobile Analytics"
        }, 
        {
            "location": "/aws/services/#application-integration", 
            "text": "", 
            "title": "Application Integration"
        }, 
        {
            "location": "/aws/services/#step-functions", 
            "text": "Managing your lamda function and manage the steps to go through it.", 
            "title": "Step functions"
        }, 
        {
            "location": "/aws/services/#amazon-mq", 
            "text": "For message queues. similar to Rabbit MQ.", 
            "title": "Amazon MQ"
        }, 
        {
            "location": "/aws/services/#sns", 
            "text": "A notification service. Will be setting a billing alarm.", 
            "title": "SNS"
        }, 
        {
            "location": "/aws/services/#sqs", 
            "text": "One of the oldest services.\nA way of decoupling your infrastructure.", 
            "title": "SQS"
        }, 
        {
            "location": "/aws/services/#swf-simple-workflow-service", 
            "text": "", 
            "title": "SWF :Simple Workflow Service"
        }, 
        {
            "location": "/aws/services/#customer-engagement", 
            "text": "", 
            "title": "Customer engagement"
        }, 
        {
            "location": "/aws/services/#connect", 
            "text": "A contact center as a service. Similar to having a call center on the cloud.", 
            "title": "Connect"
        }, 
        {
            "location": "/aws/services/#simple-email-service", 
            "text": "A great way of sending large amount of emails.", 
            "title": "Simple email service"
        }, 
        {
            "location": "/aws/services/#business-productivity", 
            "text": "", 
            "title": "Business Productivity"
        }, 
        {
            "location": "/aws/services/#alexa-for-business", 
            "text": "Use it to dial into a meeting room", 
            "title": "Alexa for Business"
        }, 
        {
            "location": "/aws/services/#chime", 
            "text": "Like google hangout. Record meetings.", 
            "title": "Chime"
        }, 
        {
            "location": "/aws/services/#work-docs", 
            "text": "Like a dropbox in AWS", 
            "title": "Work Docs"
        }, 
        {
            "location": "/aws/services/#workmail", 
            "text": "Like office 365", 
            "title": "WorkMail"
        }, 
        {
            "location": "/aws/services/#desktop-and-app-streaming", 
            "text": "", 
            "title": "Desktop and App Streaming"
        }, 
        {
            "location": "/aws/services/#workspaces", 
            "text": "Is a VDI solution. Accessing a desktop on the cloud on your device.", 
            "title": "Workspaces"
        }, 
        {
            "location": "/aws/services/#appstream-20", 
            "text": "Way of live streaming the application. Like Citrix.", 
            "title": "AppStream 2.0"
        }, 
        {
            "location": "/aws/services/#iot-internet-of-things", 
            "text": "", 
            "title": "IOT Internet Of Things"
        }, 
        {
            "location": "/aws/services/#iot", 
            "text": "", 
            "title": "iOT"
        }, 
        {
            "location": "/aws/services/#iot-device-management", 
            "text": "", 
            "title": "iOT Device Management"
        }, 
        {
            "location": "/aws/services/#freertos", 
            "text": "", 
            "title": "FreeRTOS"
        }, 
        {
            "location": "/aws/services/#greengrass", 
            "text": "", 
            "title": "Greengrass"
        }, 
        {
            "location": "/aws/services/#game-development", 
            "text": "", 
            "title": "Game Development"
        }, 
        {
            "location": "/aws/services/#gamelift", 
            "text": "Service to help you develop a game.", 
            "title": "GameLift"
        }
    ]
}